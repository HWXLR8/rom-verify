#!/usr/bin/env python3

import binascii
import io
from lxml import etree
import os
import sys
import zipfile

if len(sys.argv) < 2:
    print("Usage: rom-verify [ROM_PATH]")
    sys.exit(1)

ROM_PATH = sys.argv[1]
IGNORE = []
CATEGORIES = [
    'Japan',
    'USA',
    # 'Europe',
    # 'China',
    # 'Asia',
    # '(Beta)'
]

def find_roms(dir, ignore=[]):
    roms = []
    for dirpath, dirnames, filenames in os.walk(dir):
        dirnames[:] = [d for d in dirnames if d not in ignore]
        for filename in filenames:
            roms.append(os.path.join(dirpath, filename))
    return roms

def parse_dat(cat):
    tree = etree.parse('../nes.dat')
    root = tree.getroot()
    game_crc = {}
    for game in root.findall('game'):
        name = game.get('name')
        if cat not in name:
            continue
        crc = game.find('.//rom').get('crc')
        game_crc[crc] = name
    return game_crc

cat_sizes = {} # category : num of roms
romsets = {}   # category : romset
dats = {}      # category : dat
for cat in CATEGORIES:
    dats[cat] = parse_dat(cat)
    cat_sizes[cat] = sum(cat in v for v in dats[cat].values())
    romsets[cat] = set()

roms = find_roms(ROM_PATH, IGNORE)
for cat in CATEGORIES:
    for fname in roms:
        if fname.endswith('.zip'):
            zf = open(fname, 'rb')
            zdata = zf.read()
            zf.close()
            zref = zipfile.ZipFile(io.BytesIO(zdata), 'r')
            # assume only 1 file in the archive
            unzf = zref.namelist()[0]
            # read file contents
            unz_data = zref.read(unzf)
            zref.close()
            # strip iNES header
            unz_data = unz_data[16:]
            # calculate crc
            crc = binascii.crc32(unz_data)
            crc = hex(crc)[2:].zfill(8)
        else: # ignore non-zips for now...
            continue

        if crc in dats[cat]:
            # print(f"{unzf} matches {dat[crc]}")
            del dats[cat][crc]
            romsets[cat].add(crc)
        # else:
        #     print(f"{unzf} with CRC {crc} has no matches")

romset_sizes = {}
for cat in CATEGORIES:
    romset_size = len(romsets[cat])
    cat_size = cat_sizes[cat]
    completion_rate = round(romset_size/cat_size * 100, 2)
    print (f"romset {cat} is {completion_rate}% complete [{romset_size}/{cat_size}]")

# write missing roms to file
# print("writing missing roms to MISSING")
# with open('MISSING', 'w') as f:
#     for k, v in dat.items():
#         if REGION in v:
#             f.write(f"{v}, {k}\n")
